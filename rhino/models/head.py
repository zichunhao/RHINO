from collections.abc import Callable

import torch
import torch.nn as nn
from utils.logger import LOGGER as _logger
import warnings
import math

# typing
ActivationType = str | nn.Module | Callable[[], nn.Module]
BatchNormType = bool


def _no_grad_trunc_normal_(
    tensor: torch.Tensor, mean: float, std: float, a: float, b: float
) -> torch.Tensor:
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            "mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
            "The distribution of values may be incorrect.",
            stacklevel=2,
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(
    tensor: torch.Tensor,
    mean: float = 0.0,
    std: float = 1.0,
    a: float = -2.0,
    b: float = 2.0,
) -> torch.Tensor:
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class DINOHead(nn.Module):
    """Project head for DINO
    Source: https://github.com/facebookresearch/dino/blob/7c446df5b9f45747937fb0d72314eb9f7b66930a/vision_transformer.py#L257-L291
    """

    def __init__(
        self,
        in_dim: int,
        proj_dim: int,
        fc_params: tuple[int, int],
        l2_norm: bool = True,
        weight_norm: bool = True,
        activation: str = "gelu",
    ) -> None:
        super().__init__()
        fcs = []
        for out_dim, drop_rate in fc_params:
            fcs.append(
                nn.Sequential(
                    nn.Linear(in_dim, out_dim), self._get_activation(activation)
                )
            )
            if drop_rate > 0:
                fcs.append(nn.Dropout(drop_rate))
            in_dim = out_dim
        self.mlp = nn.Sequential(*fcs)
        self.apply(self._init_weights)
        # weight normalization for the last layer
        if weight_norm:
            # self.last_layer = nn.utils.weight_norm(
            #     nn.Linear(in_dim, proj_dim, bias=False)
            # )
            # self.last_layer.weight_g.data.fill_(1)
            # self.last_layer.weight_g.requires_grad = False
            self.last_layer = nn.utils.parametrizations.weight_norm(
                nn.Linear(in_dim, proj_dim, bias=False)
            )
            self.last_layer.parametrizations.weight.original0.data.fill_(1)
            self.last_layer.parametrizations.weight.original0.requires_grad = False
            _logger.info("DINOHead: Weight norm is applied to the last linear layer")
        else:
            self.last_layer = nn.Linear(in_dim, proj_dim, bias=False)
        self.l2_norm = l2_norm
        if self.l2_norm:
            _logger.info("DINOHead: Normalize projection output with L2 norm")

    def _init_weights(self, m: nn.Module) -> None:
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=0.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.mlp(x)
        if self.l2_norm:
            x = nn.functional.normalize(x, dim=-1, p=2)
        x = self.last_layer(x)
        return x

    def _get_activation(self, activation: str):
        activation = activation.lower()
        if activation == "gelu":
            return nn.GELU()
        elif activation == "relu":
            return nn.ReLU()
        elif "leaky" in activation and "relu" in activation:
            return nn.LeakyReLU(negative_slope=0.01)
        elif activation == "silu":
            return nn.SiLU()
        elif activation == "prelu":
            return nn.PReLU()
        else:
            raise ValueError(f"Activation {activation} not available.")


class Head(nn.Module):
    """
    A simple MLP head.

    Args:
        input_dim: The input dimension.
        hidden_dims: A list of hidden dimensions.
        output_dim: The output dimension.
        activations: A single activation function or a list of activation functions. Default is "ReLU".
        batch_norms: A single batch norm flag or a list of batch norm flags. Default is True.
        dropouts: A single dropout rate or a list of dropout rates. Default is 0.0 (no dropout).
        l2_norm: Whether to normalize the vector before the last layer. Default is True.
        weight_norm: Whether to apply weight normalization to the last layer. Default is True.
    """

    def __init__(
        self,
        input_dim: int,
        hidden_dims: list[int],
        output_dim: int,
        activations: ActivationType | list[ActivationType] = "ReLU",
        batch_norms: BatchNormType | list[BatchNormType] = True,
        dropouts: float | list[float] = 0.0,
        l2_norm: bool = True,
        weight_norm: bool = True,
        xavier_init: bool = False
    ):
        super().__init__()
        self.input_dim = input_dim
        self.hidden_dims = hidden_dims
        self.output_dim = output_dim
        self.l2_norm = l2_norm
        self.weight_norm = weight_norm

        activations_list = self._parse_activations(activations)
        batch_norms_list = self._parse_batch_norms(batch_norms)
        dropouts_list = self._parse_dropouts(dropouts)

        self._build_mlp(activations_list, batch_norms_list, dropouts_list)
        if xavier_init:
            self.apply(self._xavier_init)

    def _parse_activations(
        self, activations: ActivationType | list[ActivationType]
    ) -> list[str | nn.Module]:
        """
        Parse the activations argument into a list of activation functions.

        Args:
            activations: A single activation function or a list of activation functions.

        Returns:
            A list of activation functions.

        Raises:
            TypeError: If the activations argument is of an unsupported type.
            ValueError: If the number of activations does not match the number of hidden layers.
        """
        if isinstance(activations, (str, nn.Module)):
            return [activations] * len(self.hidden_dims)
        if not isinstance(activations, (list, tuple)):
            raise TypeError(f"Unsupported activations type: {type(activations)}")
        if len(activations) != len(self.hidden_dims):
            raise ValueError(
                f"Number of activations ({len(activations)}) must match number of hidden layers ({len(self.hidden_dims)})"
            )

        # Eliminate list[Callable[[], nn.Module]] to match the return type
        _activations = [
            act if isinstance(act, (str, nn.Module)) else act() for act in activations
        ]
        return _activations

    def _parse_batch_norms(
        self, batch_norms: BatchNormType | list[BatchNormType]
    ) -> list[bool]:
        """
        Parse the batch_norms argument into a list of batch norm flags.

        Args:
            batch_norms: A single batch norm flag or a list of batch norm flags.

        Returns:
            A list of batch norm flags.

        Raises:
            TypeError: If the batch_norms argument is of an unsupported type.
            ValueError: If the number of batch norm flags does not match the number of layers.
        """
        if isinstance(batch_norms, bool):
            return [batch_norms] * (len(self.hidden_dims))
        if not isinstance(batch_norms, (list, tuple)):
            raise TypeError(f"Unsupported batch_norms type: {type(batch_norms)}")
        if len(batch_norms) != len(self.hidden_dims):
            raise ValueError(
                f"Number of batch norm flags ({len(batch_norms)}) must match number of layers ({len(self.hidden_dims)})"
            )

        _batch_norms = [bn if isinstance(bn, bool) else bool(bn) for bn in batch_norms]
        return _batch_norms

    def _parse_dropouts(
        self, dropouts: float | list[float]
    ) -> list[float]:
        """
        Parse the dropouts argument into a list of dropout rates.

        Args:
            dropouts: A single dropout rate or a list of dropout rates.

        Returns:
            A list of dropout rates.

        Raises:
            TypeError: If the dropouts argument is of an unsupported type.
            ValueError: If the number of dropout rates does not match the number of layers.
        """
        if isinstance(dropouts, (int, float)):
            return [float(dropouts)] * len(self.hidden_dims)
        if not isinstance(dropouts, (list, tuple)):
            raise TypeError(f"Unsupported dropouts type: {type(dropouts)}")
        if len(dropouts) != len(self.hidden_dims):
            raise ValueError(
                f"Number of dropout rates ({len(dropouts)}) must match number of layers ({len(self.hidden_dims)})"
            )

        _dropouts = [float(drop) for drop in dropouts]
        return _dropouts

    def _build_mlp(
        self, activations: list[str | nn.Module], batch_norms: list[bool], dropouts: list[float]
    ) -> nn.Sequential:
        """
        Build the MLP model:
        - input -> [linear (-> batch norm) (-> activation) (-> dropout)] -> output

        Args:
            activations: A list of activation functions.
            batch_norms: A list of batch norm flags.
            dropouts: A list of dropout rates.
        """
        layers = []
        dims = [self.input_dim] + self.hidden_dims

        for i in range(len(dims) - 1):
            layers.append(nn.Linear(dims[i], dims[i + 1]))
            if batch_norms[i]:
                layers.append(nn.BatchNorm1d(dims[i + 1]))
            layers.append(self._get_activation(activations[i]))
            if dropouts[i] > 0.0:
                layers.append(nn.Dropout(dropouts[i]))

        # Output layer (no batch norm, no activation, no dropout)
        self.mlp = nn.Sequential(*layers)
        if self.weight_norm:
            self.last_layer = nn.utils.weight_norm(
                nn.Linear(dims[-1], self.output_dim, bias=False)
            )
            self.last_layer.weight_g.data.fill_(1)
            self.last_layer.weight_g.requires_grad = False
        else:
            self.last_layer = nn.Linear(dims[-1], self.output_dim)

    @staticmethod
    def _get_activation(activation: str | nn.Module) -> nn.Module:
        """
        Get the activation function module.
        1. If the activation is a string, get the corresponding torch.nn module.
        2. If the activation is a torch.nn.Module, return it as is.
        3. If the activation is a callable, call it to get the activation module.
        """
        if isinstance(activation, str):
            return getattr(nn, activation)()
        if isinstance(activation, nn.Module):
            return activation
        if callable(activation):
            return activation()
        raise ValueError(f"Unsupported activation type: {type(activation)}")

    def _xavier_init(self, layer: nn.Module):
        """
        Apply Xavier initialization to the given layer.
        """
        if isinstance(layer, nn.Linear):
            nn.init.xavier_uniform_(layer.weight)
            if layer.bias is not None:
                nn.init.zeros_(layer.bias)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        """Forward pass of the MLP."""
        x = self.mlp(x)
        if self.l2_norm:
            x = nn.functional.normalize(x, dim=-1, p=2)
        x = self.last_layer(x)
        return x
